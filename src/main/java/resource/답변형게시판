# 답변형 게시판
1. 주요기능
	1) 전체글 리스트
		block단위 페이징 처리
			[1][2][3][4][5]>>
			<<[6][7][8][9][10]>>
		검색 처리
		계층형 답글 달기 처리
	2) 글등록
		첨부파일 처리(다중파일)
	3) 상세화면리스트
		수정
		삭제
		파일다운로드
		답글
2. 개발 순서
	1) DB 설계 및 테이블 구성
		board : 번호, 상위번호, 제목, 작성자, 등록일, 수정일, 조회수, 내용
				no	refno	subject writer regdte updte readcnt content
		boardfile : 번호, 파일명, 경로명, 내용, 생서일
					no	fname pathname content credte
		board_seq (sequence만들기)
	2) vo작성
		리스트/입력 처리 vo
		조회처리 및 페이지처리 관련 vo
		첨부파일 vo
	3) 기본 조회 리스트 작성 하기
		select * form board
		where subject like'%%'
		and writer like '%%';
		dao
		mapper
		service
		controller
		jsp(화면출력)
	4) 등록처리
		sql : insert into board values()
			  insert into boardFile values();
		dao
		mapper
		serviece
			첨부파일 로직 처리..
		controller
		jsp(초기화면 구성)
	5) 상세화면처리
		- 상세화면보기
		- 수정
		- 삭제
		- 답글 처리 순간 데이터 구조가 계층형으로 처리.
	6) 계층형 리스트 처리하기.
		- 계층형 sql 작성
		- 조회 vo 할당(BoardSch 추가)
			전체글수
			페이지당 보일 데이터 건수
			페이지수
			시작번호
			마지막번호
		- service단에서 business로직 처리.
		
		- 계층적 리스트 및 페이징 처리..
			페이지당 데이터 건수 select[3/5/10/20]
			클릭한 현재 페이지 번호 [1][2][3][4][5]
			페이지블럭 처리.	<<		>>

# DB 설계 및 VO만들기
	1) DB 설계 및 테이블 구성
		board : 번호, 상위번호, 제목, 작성자, 등록일, 수정일, 조회수, 내용
				no	refno	subject writer regdte updte readcnt content
		boardfile : 번호, 파일명, 경로명, 내용, 생서일
					no	fname pathname content credte
		board_seq (sequence만들기)
	2) vo작성
		리스트/입력 처리 vo(board.z01_vo.Board)
		조회처리 및 페이지처리 관련 vo
		첨부파일 vo(board.z01_vo.BoardFile)
		
# 기본 조회 리스트 작성하기
	1) sql
		select * form board
		where subject like'%%'
		and writer like '%%'
		order by no desc;
	2) 	dao		public ArrayList<Board> boardList(board sch);
	3) 	mapper
	4)	service
			- board.a02_service.A01_BoardService
	5)	controller
			modelAttribute 명 sch
			model명 boardList
		jsp(화면출력)

# 기본 정보 등록 하기.
	1) list화면에서 등록버튼 클릭
		/board.do?method=insForm으로 등록 화면 이동
	2) controller 등록화면 선언
	3) 등록 화면 a02_boardInsert.jsp
		form화면 구성.. action /board.do?method=insert
		상위글번호(0, hidden), 글제목, 작성자, 내용, 첨부파일
	4) 등록 sql
		INSERT INTO board values(board_seq.nextval,
			0, '첫번째 글', '내용',
			'홍길동', 0, sysdate, sysdate)
	5) dao
		public void insertBoard(Board insert);
	6) mapper.xml 작성.
	7) service
	8) controller
		등록 service 호출.
	9) 화면 등록 완료 처리 메시지 출력..
	
# 파일업로드 처리.
1. 다중파일 업로드를 위한 화면 UI 구성(view)
	<input type="file" name="report"/>
2. form 객체의 속성 추가 처리
	<form enctype="multipart/form-date"
3. container에 파일업로드 view bean추가 처리.
	org.springframework.web.multipart.commons.CommonsMulipartResolver
4. VO에 report라는 프로퍼티로 네트워크상(client ==> server) 전송 가능하게
	해주는 MultipartFile 객체를 속성 선언.
	private MultipartFile[] report;
5. controller에서 파일이 전송되었는지 확인.
6. service단에서 받은 MultipartFile을 File객체로 변환해서
	1) 특정 위치에 저장 처리.
		