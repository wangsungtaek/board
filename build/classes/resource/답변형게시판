# 답변형 게시판
1. 주요기능
	1) 전체글 리스트
		block단위 페이징 처리
			[1][2][3][4][5]>>
			<<[6][7][8][9][10]>>
		검색 처리
		계층형 답글 달기 처리
	2) 글등록
		첨부파일 처리(다중파일)
	3) 상세화면리스트
		수정
		삭제
		파일다운로드
		답글
2. 개발 순서
	1) DB 설계 및 테이블 구성
		board : 번호, 상위번호, 제목, 작성자, 등록일, 수정일, 조회수, 내용
				no	refno	subject writer regdte updte readcnt content
		boardfile : 번호, 파일명, 경로명, 내용, 생서일
					no	fname pathname content credte
		board_seq (sequence만들기)
	2) vo작성
		리스트/입력 처리 vo
		조회처리 및 페이지처리 관련 vo
		첨부파일 vo
	3) 기본 조회 리스트 작성 하기
		select * form board
		where subject like'%%'
		and writer like '%%';
		dao
		mapper
		service
		controller
		jsp(화면출력)
	4) 등록처리
		sql : insert into board values()
			  insert into boardFile values();
		dao
		mapper
		serviece
			첨부파일 로직 처리..
		controller
		jsp(초기화면 구성)
	5) 상세화면처리
		- 상세화면보기
		- 수정
		- 삭제
		- 답글 처리 순간 데이터 구조가 계층형으로 처리.
	6) 계층형 리스트 처리하기.
		- 계층형 sql 작성
		- 조회 vo 할당(BoardSch 추가)
			전체글수[DB]
			페이지당 보일 데이터 건수[화면-요청]
			페이지수[service단 로직]
			현재페이지[화면-요청]
			시작번호[service단 로직]
			마지막번호[service단 로직]
		- service단에서 business로직 처리.
		
		- 계층적 리스트 및 페이징 처리..
			페이지당 데이터 건수 select[3/5/10/20]
			클릭한 현재 페이지 번호 [1][2][3][4][5]
			페이지블럭 처리.	<<		>>

# DB 설계 및 VO만들기
	1) DB 설계 및 테이블 구성
		board : 번호, 상위번호, 제목, 작성자, 등록일, 수정일, 조회수, 내용
				no	refno	subject writer regdte updte readcnt content
		boardfile : 번호, 파일명, 경로명, 내용, 생서일
					no	fname pathname content credte
		board_seq (sequence만들기)
	2) vo작성
		리스트/입력 처리 vo(board.z01_vo.Board)
		조회처리 및 페이지처리 관련 vo(board.z01_vo.BoardSch)
		첨부파일 vo(board.z01_vo.BoardFile)
		
# 기본 조회 리스트 작성하기
	1) sql
		select * form board
		where subject like'%%'
		and writer like '%%'
		order by no desc;
	2) 	dao		public ArrayList<Board> boardList(board sch);
	3) 	mapper
	4)	service
			- board.a02_service.A01_BoardService
	5)	controller
			modelAttribute 명 sch
			model명 boardList
		jsp(화면출력)

# 기본 정보 등록 하기.
	1) list화면에서 등록버튼 클릭
		/board.do?method=insForm으로 등록 화면 이동
	2) controller 등록화면 선언
	3) 등록 화면 a02_boardInsert.jsp
		form화면 구성.. action /board.do?method=insert
		상위글번호(0, hidden), 글제목, 작성자, 내용, 첨부파일
	4) 등록 sql
		INSERT INTO board values(board_seq.nextval,
			0, '첫번째 글', '내용',
			'홍길동', 0, sysdate, sysdate)
	5) dao
		public void insertBoard(Board insert);
	6) mapper.xml 작성.
	7) service
	8) controller
		등록 service 호출.
	9) 화면 등록 완료 처리 메시지 출력..
	
# 파일업로드 처리.
1. container(dispatch-servlet.xml)에 파일 업로드
	view bean추가 처리.
	org.springframework.web.multipart.commons.CommonsMul
1. 다중파일 업로드를 위한 화면 UI 구성(view)
	<input type="file" name="report"/>
2. form 객체의 속성 추가 처리
	<form enctype="multipart/form-data"
		method="post"
3. container에 파일업로드 view bean추가 처리.
	org.springframework.web.multipart.commons.CommonsMulipartResolver
4. VO에 report라는 프로퍼티로 네트워크상(client ==> server) 전송 가능하게
	해주는 MultipartFile 객체를 속성 선언.
	private MultipartFile[] report;
	@RequestParam("report") MultipartFile report,
5. controller에서 파일이 전송되었는지 확인.
	report.getOriginalFilename();
6. service단에서 받은 MultipartFile을 File객체로 변환해서
	1) 특정 위치에 저장 처리.
		eclipse tomcat웹 서비스 사용하기 때문
		- 임시 폴드 : 우선 저장(tmpUpload) - info에 위치 설정(절대위치지정)
		- 파일 다운로드할 폴드(upload): 임시 폴드에 있는 파일 추후 다운로드할 폴드에
			복사처리. - info에 위치 설정.절대위치지정
			(WebContent/z01_upload)
		- 다운로드 업로드 폴드 위치 지정.
		- 임시폴드에 있는 모든 파일 삭제(예외방지)
		- MultipartFile 객체(메모리로 파일정보)
			==> File변환(메모리+하드웨어적으로 특정 위치에 파일을 저장)
			transferTo()메서드 사용.
		- 임시파일 ==> 업로드할 위치로 복사.
			파일카피 정책으로는 기존파일이 있으면 덮어쓰기 처리..
		ex) 현업 처리 프로세스
		1. WAS 서버 따로 구축
		2. file 서버 따로 구축
		임시폴드가 필요 없음, 바로 파일 서버로 저장.
		동일명의 파일에 대한 처리.
			ex) 게시판 no 1번에 첨부파일 a.txt을 저장,
				no 2번에 다른 내용의 첨부파일 a.txt를 저장.
				파일 첨부시 저장되는 파일명 컬럼지정 중복되지 않게
				hash코드 + sequence abse10001(파일서버에저장할 파일명-중복불가)
				실제파일명 따로 컬럼을 지정해서 저장.
				번호 저장명		파일명
				1	abse10001	a.txt
				2	abse10002	a.txt
				다운로드시, DB에 저장된 파일명으로 전환하여 다운로드 할 수 있게
				처리한다.
		
	2) DB에 해당 파일 정보를 저장 처리.
		(상세화면에서 다운로드 처리를 위해 파일 정보 저장)
		- db 구조 만들기
			boardfile : 번호, 파일명, 경로명, 내용, 생성일
						no	fname	pathname	content	credte
		- sql 확인 insert into boardfile(board_seq.currval,
			#{fname}, #{pathname}, #{content}, sysdate)
			board_seq.currval : 등록하는 main board테이블에
			no와 동일하게 처리.
		- VO만들기 vo BoardFile
		- dao
		- 공통 vo 마이바티즈 공통파일 등록, mapper.xml sql 등록 처리
		- service단에서 호출 처리.
		
# 상세화면 처리
1. 리스트 화면에서 특정한 row 클릭, no와 함께
	controller 상세화면 처리
2. sql 작성 select * from board where no=#{no}
3. dao 작성
4. XXXmapper.xml
5. service 호출
6. controller
	model 처리
	상세 화면 호출
7. 상세화면에 출력 리스트
		
		
# 첨부파일 리스트 및 다운로드
1. sql작성 select * from boardfile where no=#{no}
2. vo확인(BoardFile)
3. dao public ArrayList<BoardFile> getBoardFile(int no);
4. mapper처리.
5. Board VO객체에 첨부파일을 처리할 수 있는 추가 증록
	private ArrayList<BoardFile> fileInfo;
6. service에서 Board VO에 할당
7. jsp에서 처리.

# 리스트된 내용을 클릭으로 상세화면 처리시, 조회수 count up 처리.
1. sql
	update board
		set readcnt = readcnt+1
	where no = #{no}
2. dao public void updateBoard(int no);
3. mapper
4. service단에서 호출
	dao.updateBoard(no);

# 파일 다운로드..
1. 리스트 처리
	board의 FileInfo로 리스트 처리
2. 파일다운로드 view등록..
3. 파일을 모델로 파일 다운로드 처리 controller 생성
	- 요청값으로 파일명을 전송
	- model값 파일을 설정..downloadFile로 설정해야 지정된
		파일명을 viewer에서 인식
	- return으로 컨테이너에서 선언 bean id를 호출..
		downloadviewer
4. 상세화면 리스트에서 함수로 파일 다운 호출
	다운로드 controller 호출..
5. 해당 파일 클릭시, 다운로드 처리..

# 파일 다운로드 viewer 작성
1. api에서 지원되는 부분에서 model데이터로 특정한 파일을 지정해야 하기 때문에
	사용자 정의로 만들어야 한다.
2. 사용자 정의 viewer 작성 순서
-1 상속 AbstractView 선언
	1) overriding 메서드 재정의
	-renderMergedOutputModel
		매개변수
		Map<String, Object> model, : 다운로드할 파일명을 할당 처리.
		HttpServletRequest request,
		HttpServletResponse response
-2. 다운로드 처리
	1) upload된 파일 가져오기. (서버가 가지고 있는 파일)
		- 현재 viewer를 호출시, 사용되는 model 객체 가져오기
		- File 객체 새엉
	2) 모델과 함께 있는 File객체 가져오기. (서버가 가지고 있는 파일)
	3) 반응 객체(response)로 전달 처리(클라이언트에 파일)
		- 전체 파일명
		- 파일명
		- 파일의 길이
		- setContentType 설정 : application/download;charset-utf-8
		- setContentLength로 파일의 길이 설정.
		- 한글명된 파일은 Encoding처리.
		- 파일을 response에 탑재를 위한 header부분 설정.
			Content-Disposition으로 attachment로 파일 설정
			Content-Transfer-Encoding설정 binary 설정..
		- 파일을 network으로 전송하기위해 Stream객체로 변환.
			InputStream(읽어오는 객체) ==> OutputStream 보내는 객체..
			FileInputStream(파일객체)
			FileCopyUtils.copy(inputstream, outputstream)
			outputstream의 flush를 통해서 자원을 해제..
			
# 파일 다운로드 처리 프로세스
1. 다운로드 viewer 만들기
	model명을 지정하고, 모델명에 파일명을 설정할 수 있도록 처리
2. 컨테이너에 viewer 등록처리
3. 다운로드할 controller url 기능 메서드 추가
	1) 요청값으로 파일명 전송
4. 화면(jsp)에서 list된 파일 중, 이벤트 클릭으로 다운로드할
	controller url와 함께 파일명 호출.
5. 다운로드 확인.


# 상세화면에서 session값에 의해 수정 삭제 권한 처리.
1. session 값로딩(js) 변수로 설정
	var sessId = "${mem.id}";
2. 수정/삭제 버튼 클릭시
	1) 작성자와 현재 session 값이 동일한지 여부를 확인하여,
		수정/삭제 프로세스가 진행될 수 있도록 처리.
	
# 수정처리
1. sql 작성
	update board
		set subject = #{subject},
			content = #{content},
			uptdte = sysdate
	where no = #{no};

2. dao
	public void updateBoard(Board upt);
3. mapper.xml
4. service
5. controller
	요청 객체 Board
	수정처리 요청 board.do?method=update
	수정처리 프로세스 service.update(upt)
6. 상세화면 view단
	수정버튼 클릭시,
	$("form").attr("action", 요청값 처리);
	$("form").submit();

# 삭제 처리..
1. sql 작성 delete from board where no=#{no}
		   delete from boardfile where no=#{no}
2. dao 선언 public void deleteBoard(int no);
		   public void deleteFile(int no);
3. service 호출
4. controller 
	선언 /board.do?method=delete
	요청값으로 no를 받아서 처리하기..
5. 화면단
	삭제버튼 클릭시,
		삭제 controller 호출..
		proc값 del 설정
		
# 답글달기
1. 게시판에서 해당 게시물에 대한 답글을 처리하는 것을 말한다.
	실제적으로 답글이라는 글을 등록 처리하는 것을 프로그래밍한다.
2. DB구조
	board의 no와 refno는 상호 계층구조로 데이터를 쌓이게 처리해야 한다.
	no	refno
	1	0
	2	0
	refno가 0인 글은 최상위 글로 일반글을 의미하고
	no	refno
	3	1
	4	3
	이 경우, 3번 글은 상위글이 1의 글이고, 다시말하면 1번 글에 대한 답글을 의미한다.
	4번 글의 경우는 3번글에 대한 답글을 의미한다.
	다시, 위 계층 구조를 정리하면 
	no
	1
	=>	3	RE:이전글내용.
		=>	4
	이와같은 계층 구조로 답글이 처리되어야 한다.
		- form의 action을 등록처리 controller를 호출하여, 해당 내용의 형식을 유지하게 한다.
	2) 기존 등록 form 컨트롤러를 통해서 해당 데이터를 mapping할수 있게 처리
		/board.do?method=insForm
		insForm(@ModelAttribute("board") Board b)
	3) 뷰단에 답글에서 넘겨온 요청값 el로 입력처리.
		<input name="refno" value="${board.refno}"
		<input name="subject" value="${board.subject}"
		<textarea name="content">${board.content}</textarea>
		혹은 spring form 태그를 활용해서 매핑
	4) 등록 처리 후, 데이터 확인.

3. 답글 처리 프로세스
	1) 상세화면에서 답글을 클릭시, 
		-refno를 현재글의 번호로 할당처리, 
			$("[name=refno]").val($("[name=no]").val());
		- 제목을 RE:이전글내용 형식의 처리를 위해서
			$("[name=subject]").val("RE"+$("[name=subject]").val());
		- 내용도 이전글의 내용을 하단이나 상단에 표시하게 처리한다.
			$("[name=content]").val("\n\n\n\n"+$("[name=content]"));
			로 처리를 하고, 
		- form의 action을 등록처리 controller를 호출하여, 해당 내용의 형식을 유지하게 한다.
	2) 기존 등록 form 컨트롤러를 통해서 해당 데이터를 mapping할수 있게 처리
		/board.do?method=insForm
		insForm(@ModelAttribute("board") Board b)
	3) 뷰단에 답글에서 넘겨온 요청값 el로 입력처리.
		<input name="refno" value="${board.refno}"
		<input name="subject" value="${board.subject}"
		<textarea name="content">${board.content}</textarea>
		혹은 spring form 태그를 활용해서 매핑
	4) 등록 처리 후, 데이터 확인.

4. 답글 처리 후, list sql(계층형 sql 처리)
	1) 계층형 sql이란 ?
	 	위와 같이 같은 테이블이나 테이블 관계에서 서로 계층형으로 연관관계가
	 	있을 때 ,데이터를 계층형 우선으로 리스트 처리해주는 oracle의 기능
	 	처리 keyword를 이용한다.
	2) 주요기능 keyword
		start with 컬럼명 = 데이터 : 계층형의 최상위 조건을 선언..refno=0
		connect by prior 하위컬럼 - 상위컬럼 : 상위/하위 컬럼을 
										mapping관계 선언 no = refno
				ex) 데이터 리스트시  connect by prior no = refno
				10번 글이 나오고, 그 다음에 나오는 데이터는 10글을 refno로 한
				글을 다음에 바로 리스트 설정 옵션.
						
						
										
		default는 오름차순으로 계층형 처리..
		내림차순(마지막 데이터를 가장 위로 처리, 답글도 최종으로 등록한 답글을 가장 위로 처리)
		으로 계층형 처리를 하려면 order siblings by 정렬기준컬럼 desc
		level 컬럼 리스트에 표현하는 속성으로 계층의 level을 표시한다.
		rownum은 계층형 상관없이 데이터리스트 번호를 출력해준다..
		
	3) 계층형에 따른 답글 처리.
	4) 답글 화면 ui 표시
		- 이미지(답글)
		- ☞
		- sql추가, level vo 등록
	5) 오늘 등록한 글 표기
		- 오늘 날짜 bean으로 등록
		- 현재 날짜 1970/1/1기준 데이터 가져오기
		- 등록일 기준 날짜 가져오기..
		- 비교하여 등록한 날과 오늘의 값이 같으면 New 표기
5. 페이징 처리.
	1) 게시판의 데이터 건수가 늘어나는 화면에 보일수 있는 한계가 있고,
		데이터 로딩 속도도 문제가 된다. 일반적으로 웹 프로그램에서 게시판은
		한번에 보일 건수를 지정하여, 페이지단위로 데이터를 볼 수 있게 처리한다.
	
	2) 화면구조
		총 건수 : @@ 			- 한번에 보일 데이터 건수 설정 SELECT 3/5/10/20
		한페이지 보일 데이터 리스트 10건 기준이면
		데이터가 10건이 보인다.
		
		block단위 페이징 처리
			[1][2][3][4][5]>>
			<<[6][7][8][9][10]>>
		해당 페이지를 클릭시, 해당 페이지에 속해있는 데이터를 리스트해서 볼 수 있다.
		<<(왼쪽페이지 블럭이동), >>(오른쪽페이지 블럭이동)을 통해서,
		다수의 페이지를 효율적으로 이동하면서 페이지 내용을 확인할 수 있다.
	3) 페이지 처리 SQL과 속성
		SELECT ROWNUM - 고유의 행데이터 번호
		...
		WHERE ROWNUM BETWEEN 페이지 시작번호 AND 페이지마지막번호
		EX) 데이터 1000건이고, 페이지당 건수 10건이면
		ROWNUM은 1~1000이 데이터베이스 SQL을 통해서 가져올 수 있고
		1번째 페이지는 WHERE ROWNUM 1 AND 10
		2번째 페이지는 WHERE ROWNUM 11 AND 20
			SELECT *
			from(
			select rownum rn, level, a.* from board a
			where subject like '%'||''||'%'
				and writer like '%'||''||'%'
			start with refno=0
			connect by prior no=refno
			order siblings by no DESC)
			WHERE rn BETWEEN 1 AND 5
	
	4) 페이지 처리를 위한 속성들..
		시작번호 : start
		마지막번호 : end
	5) 위 속성을 가져오기 위한 속성
		총 데이터 건수(db sql) : count select count(*) from board where...
		한번에 보여줄 페이지(화면에서 요청값-select) : pageSize
		총 페이지 수 : pageCount : 총데이터건수 100 한번에 보여줄 페이지 10
						100/10 == 10페이지
					나머지가 있으면 올림처리가 되게 한다. Math.ceil()		
					ex) 101건이면 총페이지수 11페이지 처리
		[1][2][3][4][5][6][7][8][9][10]
		현재페이지 : 위에 리스트된 페이지번호를 클릭했을 때, 
			시작번호와 마지막번호를 처리하기위해서 넘겨준다
		마지막번호 : 현재페이지 * 한번에 보여줄 페이지
			ex )1*10 ==> 10 첫번째 페이지 번호 클릭시 마지막 번호
				2*10 ==> 20	두번째 페이지 번호 클릭시 마지막 번호
		시작번호 : (한번에 보여줄 페이지-1)*한번에 보여줄 페이지+1
			ex) (1-1)10+1	==> 1 첫번째 페이지 번호 클릭시 첫번째 번호
				(2-1)10+1	==> 11 두번째 페이지 번호 클릭시 첫번째 번호
   	--블럭
   	
6. 개발 순서(기본 페이징 처리)
	1) 위에 선언된 조회를 위한 기본 속성을 VO 생성.
		BoardSch
		subject, writer, count, pageSize, pageCount,
		curPage, start, end;
	2) 공통 mybatis xml에 등록 처리.
		BoardSch sch
		검색관련 요청 controller service dao 모든 매개변수 BoardSch
	3) 총데이터 건수 dao 메서드 작성 : 
	
		public int totCnt(BoardSch sch);
	
	4) mapper.xml 
		총건수 처리,
		기본 sql에 start, end 추가 처리.
		
	5) service단에서
		위  business 로직에 의한 start, end 설정..
		
	6) controller단에 modelattribute로 BoardSch로 변경
	
	7) 화면단
		총건수 표기
		select name="pageSize"
		반복문을 이용해서 총페이지 수만큼 처리
		페이지를 클릭시, hidden name="curPage"에 해당값 설정.
		요청값 전달..

7. 블럭페이지 처리
	1) 페이지수가 커질 때, 한정된 페이지(5,7,9) 번호를 보이고,
		해당 범위 이상으로 가면 <<(이전), >>(이후)로 block단위로
		페이지를 보이게 하여, 효과적으로 페이징 처리를 하는 것을 말한다.
	2) 핵심 로직
				1	2	3	4	5	[이후] ==> blocknum 1
		[이전]	6	7	8	9	10	[이후] ==> blocknum 2
		[이전]	11	12	13				  ==> blocknum 3
			이전/이후를 클릭시, 블럭단위로 이동 처리하여 페이지번호를 하단에
			리스트 처리한다.
	3) 주요속성
		blocksize : 블럭단위로 보일 페이지의 크기
		blocknum : 블럭단위에 할당할 블럭번호
			(blocksize와 curpage를 이용해서 처리)
			curpage/blocksize
			1/5, 2/5, 3/5, 4/5, 5/5 ==> 1
			6/5, 7/5, 8/5, 9/5, 10/5 ==> 2
						 
			ex) 1번 블럭에는 1페이지 ~ 5페이지까지 출력
				2번 블럭에는 6페이지 ~ 10페이지까지 출력
				3번 블럭에는 11페이지 ~ 페이지의 마지막 번호(pageCount)
		endBlock 블럭마다 마지막 페이지번호
			blocknum * blocksize
			마지막 블럭의 페이지번호는 pageCount까지이다.
		startBlock 블럭마다 시작 페이지번호
			(blocknum-1) * blicksize + 1
			
	4) 개발 순서
		- VO 속성값 지정.
		- service단에서 위의 로직 처리..
		- 화면단 구현..
			<c:forEach begin="${boardsch.startBlock}
				end="${boardsch.endBlock}/>
			이전/이후를 클릭시, 전송할 현재페이지.-1, curpage설정..
			
			